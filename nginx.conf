user nobody;
worker_processes auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
  worker_connections 1024;
}

http {
  lua_package_path "/usr/local/openresty/lualib/?.lua;;";
  lua_code_cache off;
  include mime.types;
  default_type application/octet-stream;

  #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';

  log_format log_req_resp '$remote_addr - $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent" '
  '$request_time req_header:"$req_header" req_body:"$request_body" '
  'resp_header:"$resp_header" resp_body:"$resp_body"';

  lua_need_request_body on;

  #access_log  logs/access.log  main;
  sendfile on;
  #tcp_nopush     on;

  #keepalive_timeout  0;
  keepalive_timeout 65;

  #gzip  on;

  server {
    listen 7001;
    server_name localhost;

    #access_log  logs/host.access.log  main;

    location / {
      # root   html;
      # index  index.html index.htm;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header AD-X-Forwarded-For $http_x_original_forwarded_for;
      proxy_pass http://localhost:7003;
    }

    location /eumcollector/mobileMetrics {
      set $resp_body "";
      body_filter_by_lua '
      local resp_body = string.sub(ngx.arg[1], 1, 1000)
      ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
      if ngx.arg[2] then
      ngx.var.resp_body = ngx.ctx.buffered
      end
      ';

      set $req_header "";
      set $resp_header "";
      set $endpoint "";
      header_filter_by_lua '
      local h = ngx.req.get_headers()
      for k, v in pairs(h) do
      ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
      end
      local rh = ngx.resp.get_headers()
      for k, v in pairs(rh) do
      ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
      end
      ';

      # rewrite_by_lua '
      #  --ngx.var.endpoint = "eumcollector/ping"
      #  --ngx.req.set_uri("/eumcollector/ping")
      #  --ngx.req.set_method(ngx.HTTP_GET)
      #  --ngx.status = ngx.HTTP_OK
      #  --ngx.header["Content-Type"] = "application/json"
      #  --ngx.say("{}")
      #  --ngx.exit(ngx.HTTP_OK)
      #';

      rewrite_by_lua_file /etc/nginx/test.lua;

      access_log /var/log/nginx/server.log log_req_resp;

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header AD-X-Forwarded-For $http_x_original_forwarded_for;

      proxy_pass http://localhost:7003;

    }

    location = /mysql-test {
      content_by_lua_file /root/mysql-test.lua;
    }

    location /sum {
      content_by_lua_block {
        local args = ngx.req.get_uri_args();
        ngx.say(args.a + args.b)
        local h = ngx.req.get_headers()
        for k, v in pairs(h) do
        ngx.say(k, v)
        end
      }
    }


    #error_page  404              /404.html;
    # redirect server error pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
      root html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}
    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
  }


  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  #server {
  #    listen       8000;
  #    listen       somename:8080;
  #    server_name  somename  alias  another.alias;
  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}
  # HTTPS server
  #
  #server {
  #    listen       443 ssl;
  #    server_name  localhost;
  #    ssl_certificate      cert.pem;
  #    ssl_certificate_key  cert.key;
  #    ssl_session_cache    shared:SSL:1m;
  #    ssl_session_timeout  5m;
  #    ssl_ciphers  HIGH:!aNULL:!MD5;
  #    ssl_prefer_server_ciphers  on;
  #    location / {
  #        root   html;
  #        index  index.html index.htm;
  #    }
  #}
}
